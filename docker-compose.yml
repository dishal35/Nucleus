# Docker Compose version
version: '3.8'

# Define all the services that make up your application
services:
  # NGINX Service - Reverse Proxy
  nginx:
    build:
      context: ./nginx              # Build context directory
      dockerfile: Dockerfile        # Dockerfile to use
    ports:
      - "80:80"                    # Map host port 80 to container port 80
    depends_on:                     # Don't start until these services are up
      - frontend
      - backend
    networks:
      - app-network                 # Connect to our custom network
    restart: unless-stopped         # Restart policy

  # Frontend Service - React Application
  frontend:
    build:
      context: ./client            # Build from client directory
      dockerfile: Dockerfile
    environment:
      - REACT_APP_API_URL=http://localhost/api  # API URL through NGINX
    volumes:
      - ./client:/app              # Mount source code for development
      - /app/node_modules          # Preserve container's node_modules
    networks:
      - app-network
    restart: unless-stopped
    depends_on:
      - backend

  # Backend Service - Express API
  backend:
    build:
      context: .                   # Build from root directory
      dockerfile: Dockerfile
    environment:
      - PORT=5000
      - NODE_ENV=development
      - REDIS_URL=redis://redis:6379
      - RABBUITMQ_URL=amqp://rabbitmq:5672
      - DB_HOST=mysql
      - DB_USER=root
      - DB_PASSWORD=disha123
      - DB_NAME=data
      - JWT_SECRET=dishalohianucleus
      - SESSION_SECRET=iseesigmaaaa
    volumes:
      - .:/app                     # Mount source code for development
      - /app/node_modules          # Preserve container's node_modules
    networks:
      - app-network
    restart: unless-stopped
    depends_on:
      - mysql
      - redis
      - rabbitmq

  # MySQL Service - Database
  mysql:
    image: mysql:8.0              # Official MySQL image
    ports:
      - "3307:3306"              # Map to 3307 to avoid conflicts
    environment:
      - MYSQL_ROOT_PASSWORD=disha123
      - MYSQL_DATABASE=data
    volumes:
      - mysql_data:/var/lib/mysql  # Persist data
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:                   # Add healthcheck
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Service - Caching
  redis:
    image: redis:7-alpine         # Lightweight Redis image
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data          # Persist data
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:                  # Add healthcheck
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # RabbitMQ Service - Message Queue
  rabbitmq:
    image: rabbitmq:3-management  # Include management UI
    ports:
      - "5672:5672"              # AMQP port
      - "15672:15672"            # Management UI port
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq  # Persist data
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:                  # Add healthcheck
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"
    networks:
      - app-network
    restart: unless-stopped

  # Grafana
  grafana:
    image: grafana/grafana:latest
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=your_grafana_password
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3000:3000"
    networks:
      - app-network
    restart: unless-stopped

  # Node Exporter
  node-exporter:
    image: prom/node-exporter:latest
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "9100:9100"
    networks:
      - app-network
    restart: unless-stopped

  # MySQL Exporter
  mysql-exporter:
    image: prom/mysqld-exporter:latest
    environment:
      - DATA_SOURCE_NAME=root:${DB_PASSWORD}@(mysql:3306)/
    ports:
      - "9104:9104"
    networks:
      - app-network
    depends_on:
      - mysql
    restart: unless-stopped

  # Redis Exporter
  redis-exporter:
    image: oliver006/redis_exporter:latest
    environment:
      - REDIS_ADDR=redis://redis:6379
    ports:
      - "9121:9121"
    networks:
      - app-network
    depends_on:
      - redis
    restart: unless-stopped

  # NGINX Exporter
  nginx-exporter:
    image: nginx/nginx-prometheus-exporter:latest
    command:
      - '-nginx.scrape-uri=http://nginx:80/stub_status'
    ports:
      - "9113:9113"
    networks:
      - app-network
    depends_on:
      - nginx
    restart: unless-stopped

# Define named volumes for data persistence
volumes:
  mysql_data:      # Persist MySQL data
  redis_data:      # Persist Redis data
  rabbitmq_data:   # Persist RabbitMQ data
  prometheus_data:
  grafana_data:

# Define custom network for service communication
networks:
  app-network:
    driver: bridge   # Use bridge network driver 